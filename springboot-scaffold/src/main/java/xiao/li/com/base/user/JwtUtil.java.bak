package com.changhong.mcc.base.user;

import com.alibaba.fastjson.JSONObject;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;
import org.jose4j.json.JsonUtil;
import org.jose4j.jwk.RsaJsonWebKey;
import org.jose4j.jwt.JwtClaims;
import org.jose4j.jwt.consumer.InvalidJwtException;
import org.jose4j.jwt.consumer.JwtConsumer;
import org.jose4j.jwt.consumer.JwtConsumerBuilder;
import org.jose4j.lang.JoseException;


/**
 * @Description
 * @Author lirong.deng
 * @Date 2020/3/13 17:41
 **/
@Slf4j
public class JwtUtil {
    private static final String PUB_KEY_STR = "{\"kty\":\"RSA\",\"kid\":\"mcc_mosu_key20200703\",\"alg\":\"RS256\",\"n\":\"3pBZFxVh2zcvwGwY1SxpRA-So-d8bNMTIiigk4THcNeqCSqpFOYoZeav8PeGumIzupdDxpe8VjHBGk-gIeTLwDzPzjoKIX5cvxhXKmVBYAMVubpqPA877Dh4Vt0dnhxwqnsWtyleEJtx1Is1WtB57wHy0o8S_Hk-WMsbj1W8VVQdnPVpDeBWBdkzX0HafR5WigVO4aNTDWvX7NRyBeGxuysyGCMkV7TrLcP7wVnnZrLgzRnMJtuJQNxzHui5Z00hLQq-MlYg_ag-DERnCND699G3PiAdlk7O_LC_qD0AN6BbK8_AC1O0DeNA7381mWBqttJ2hbwasBaibViEKKoC6w\",\"e\":\"AQAB\"}";

    public static void main(String[] args) {

        String idToken = "";

        CurrentUser user = verifyAccessIdToken(idToken);
        System.out.println("用户信息："+ JSONObject.toJSONString(user));


    }

    public static CurrentUser verifyAccessIdToken(String accessToken) {
        JSONObject object = getUserByToken(accessToken);
        if (object != null && StringUtils.isBlank(object.getString("tokenType"))) {
            return (CurrentUser) object.get("currentUser");
        }
        return null;
    }

    public static JSONObject getUserByToken(String token) {
        try {
            JwtConsumer consumer = new JwtConsumerBuilder().setRequireExpirationTime()
                    .setMaxFutureValidityInMinutes(5256000).setAllowedClockSkewInSeconds(30).setRequireSubject()
                    // .setExpectedIssuer("")
                    // .setExpectedAudience("YOUR_AUDIENCE")
                    .setVerificationKey(new RsaJsonWebKey(JsonUtil.parseJson(PUB_KEY_STR)).getPublicKey()).build();
//            JwtContext jwtContext = consumer.process(token);
//            System.out.println(jwtContext.getJoseObjects());
            JwtClaims claims = consumer.processToClaims(token);
            log.info("token解析信息{}", JSONObject.toJSONString(claims));
            if (claims != null) {
                CurrentUser currentUser = new CurrentUser();
				String tokenType = (String) claims.getClaimValue("tokenType");

				String userId = (String) claims.getClaimValue("userId");
				String userName = (String) claims.getClaimValue("userName");
				String loginName = (String) claims.getClaimValue("loginName");
				String eeNo = (String) claims.getClaimValue("eeNo");
				String roleId = (String) claims.getClaimValue("roleId");
                System.out.println("用户id:" + userId);
                currentUser.setId(Long.parseLong(userId));
                currentUser.setName(userName);
                currentUser.setLoginName(loginName);
                currentUser.setEeNo(eeNo);
                currentUser.setRoleId(Long.parseLong(roleId));
                JSONObject json = new JSONObject();
                json.put("tokenType", tokenType);
                json.put("currentUser", currentUser);
                return json;
            }
        } catch (JoseException e) {
            log.error(e.getMessage());
        } catch (InvalidJwtException e) {
            log.error(e.getMessage());
        } catch (Exception e) {
            log.error(e.getMessage());
        }
        return null;
    }


    public static JwtClaims verifyJwt(String jwt) {
        try {
            JwtConsumer consumer = new JwtConsumerBuilder().setRequireExpirationTime()
                    .setMaxFutureValidityInMinutes(5256000).setAllowedClockSkewInSeconds(30).setRequireSubject()
                    .setVerificationKey(new RsaJsonWebKey(JsonUtil.parseJson(PUB_KEY_STR)).getPublicKey()).build();
            JwtClaims claims = consumer.processToClaims(jwt);
            return claims;
        } catch (JoseException e) {
            log.error("Jose异常", e);
        } catch (InvalidJwtException e) {
            log.error("jwt验签异常", e);
        } catch (Exception e) {
            log.error("jwt验签未知异常", e);
        }
        return null;
    }


}
